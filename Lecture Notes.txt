Video 2: Introduction to Flexbox
    display: flex; goes all the way and uses the entire page width.
    display: inline-flex; just takes the amount of width needed.
    The immediate children of the display: flex container makes the children flex items.

Video 3: Working with Flexbox flex-direction
    flex-direction: row; is the default for any flex container.
    this means that they will stack beside each other in a row and span the height specified.
    The main axis when flex-direction: row is from left to right. While the cross axis is from top to bottom.
    The main axis when flex-direction: column is from top to bottom. While the cross axis is from left to right.
    Similarly flow-direction: row-reverse and column-reverse work in an opposite manner.
    
Video 4: Wrapping elements with Flexbox
    The flex items try to work with the width given but if it is not possible it distributes them with an equal width.
    flex-wrap goes on the flex container. The default is nowrap
    flex-wrap: wrap wraps the extra elements in a new line/row.
    The height is automatically adjusted so as to maintain the splitting and occupying the height.
    flex-wrap: wrap-reverse; The cross axis changes from top->bottom to bottom->top
    margin is not part of the width, height etc when it comes to flex items and containers.
    padding and border are part of the box model while margin is not.

Video 5: Flexbox Ordering
    flex: 1; distributes every items equally.
    order: 0; by default.
    so any order numeral except 0 will put it at the end after all the order: 0; items.
    order can have negative values also.
    The only caveat is that it messes the mouse selector.

Video 6: Flexbox Alignment and Centering with justify-content
    Very Useful: https://css-tricks.com/snippets/css/a-guide-to-flexbox/
    justify-content deals with the alignment of the items along the Main Axis.
    flex-start is the default option.
    flex-start, flex-end, center, space-between, space-around(also considers space on left and right), space-evenly
    to take advantage of justify-content when the main axis is from top to bottom, we need to set a minimum height.

Video 7: Alignment and Centering with align-items
    align-items concerns itself with the cross axis instead of the main axis.
    align-items: center; centers along the cross axis 'WITHIN' the container.
    by default align-items is set to stretch, that means it stretches the items to the max height.
    other options include: flex-start, flex-end and baseline
    Baseline ensures that the bottom of every text within the container shares a common baseline and is therefore alined.
    try with flex-direction: column also.

Video 8: Alignment and Centering with align-content
    align-content takes the same parameters as justify-content, it just works on the cross axis.
    align-content only works if we have multiple lines of content.
    align-content has a default option of stretch
    align-content should also have items set to flex-wrap: wrap;

Video 9: Alignment and Centering with align-self
    align-self can be applied on an individual item.
    and it can override things defined using align-items.
    options can be flex-start, flex-end, center, baseline etc.

Video 10. Understanding Flexbox sizing with the flex property
    flex: is at what proportion should I (the element it is applied on)) should scale myself up and down if I have extra space or not enough space.
    flex: 1; means that each of the items should divide the remaining space proportionally and should be of the same size.
    flex: 2; when there is extra space or not enough space the width of box2 should be double the rest.

Video 11: Finally understanding Flexbox flex-grow, flex-shrink and flex-basis
    flex-grow:  When we have extra space how should we divide it amongs't everybody on the same line.
    flex-shrink: How much of myself (the item) should I shrink myself when the space is less.
    flex-basis: How high or wide an element should be before doing growing and shrinking.
    flex: 1; is the shorthand for setting flex-grow to 1 and flex-shrink: 1;
    default flex-grow for any element is 0, meaning when there is extra space just don't do anything.
    the default for flex-shrink evenly divides the items amongst' themselves.
    flex-shrink: How much of myself (the item) should I shrink myself when the space is less.
    flex: flex-grow flex-shrink flex-basis;

Video 12: How Flexbox's flex-basis and wrapping work together
    When flex-wrap: wrap; is enabled. flex-basis, flex-grow and flex-shrink work only on the they or the item they are on.

Video 13: Pure Flexbox navigation code along
    
    